<section class="description-section">
  <h2>Having a Party with P</h2>
  <p>
    <a href="resource/image/party-example.png">
      <img src="resource/image/party-example-no-header.png" />
    </a>
    <ol>
      <li>Alice connects to onramp-1, Charlie connects to onramp-2, Bob connects to onramp-1 and onramp-2.</li>
      <li>Bob connects to Alice and Charlie with the help of onramp-1 and onramp-2, respectively.</li>
      <li>Alice connects to Charlie with the help of Bob.</li>
    </ol>
  </p>

  <h3>Running the Example</h3>
  <p>
    You'll first need <a href="http://nodejs.org/">Node.js 0.10+</a> and 
    <a href="http://google.com/chrome">Chrome 26+</a>. Once you have those installed,
    open up your console and execute the following (you may need <code>sudo</code>):
  </p>

  <pre class="prettyprint">
npm install -g onramp; # installs the onramp server
npm install -g p-examples; # installs the p examples server
onramp&amp; # start the onramp server in the background on default port 20500
onramp -h :20400&amp; # start the second onramp server in the background on port 20400
p-examples; # start the example server in the foreground
</pre>

  <p>
    Now, find where your Chrome browser is installed and execute it with the <code>--enable-data-channels</code> flag.
    The simplest way to do it is via the terminal:

    <ul>
      <li>
        Windows: <code>[path to chrome.exe] --enable-data-channels</code>
      </li>
      <li> 
        Mac: <code>open /Applications/Google\ Chrome.app --args --enable-data-channels</code>
      </li>
      <li>
        Linux: <code>[chrome or chromium executable] --enable-data-channels</code>
      </li>
    </ul>
  </p>
  <p>
    Finally, open <a href="http://localhost:20501/party/bob.html">http://localhost:20501/party/bob.html</a>, 
    <a href="http://localhost:20501/party/alice.html">http://localhost:20501/party/alice.html</a>, and
    <a href="http://localhost:20501/party/charlie.html">http://localhost:20501/party/charlie.html</a>.
  </p>
  <p>
    If you check the JavaScript console for charlie.html, you should see "[a unique id] said Hi, I'm Alice!".
    This means that Alice was successfully able to connect to Charlie.
  </p>

  <h3>What Happened</h3>
  <p>
    For the sake of simplicity, we hosted everything on one machine. We could
    have just as easily hosted each node (onramp servers, browsers) 
    in a different machine -- all we would have to change is the address to the 
    onramp servers.
  </p>
  <p>
    You can read each of the scripts to see what they were doing:
    <ul>
      <li>
        <a href="https://raw.github.com/oztu/p/master/examples/party/bob.js">bob.js</a>,
        connected to both onramp servers and used them to establish connections to both
        Alice and Charlie.
      </li>
      <li>
        <a href="https://raw.github.com/oztu/p/master/examples/party/alice.js">alice.js</a>,
        connected to onramp-1, then accepted a connection Bob, and finally asked to be connected
        to Charlie with the help of Bob.
      </li>
      <li>
        <a href="https://raw.github.com/oztu/p/master/examples/party/charlie.js">charlie.js</a>,
        connected to onramp-2, then accepted any connection requests made to it.
      </li>
      <li>
        <a href="https://raw.github.com/oztu/onramp/master/bin/onramp">onramp</a>,
        a basic WebSocket server which helps browsers connect to each other.
      </li>
    </ul>
  </p>
</section>