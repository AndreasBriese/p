<section class="description-section">
  <h2>Common uses for P</h2>

  <h4><b>Connecting to connections an onramp server</b></h4>
  <p>
    onramp broadcasts all existing and new connections whenever a connection is
    established. By listening to the "remote address" message from the onramp connection,
    you can create connections to all other connections on the onramp server.
  </p>
<pre class="prettyprint lang-js">
// An array in which we'll keep our peers
var peers = [];

// Sets the onramp address to the default
var onrampAddress = "ws://" + localhost.hostname + ":20500";

// Create the root peer node
var rootNode = P.create();

// Connect to the websocket server, onramp, which will help
// us connect to other browsers
var onrampPeer = rootNode.connect(onrampAddress);

// Listen to the messages the onramp server sends
onrampPeer.on('message', function(peerAddress){
    // Try to connect to the peer
    var rtcPeer = onrampPeer.connect(peerAddress);

    // When the peer connection opens, add the peer to
    // the peers list
    rtcPeer.on('open', function(){
      peers.push(webrtcPeer);
    });
  }
});
</pre>

<h4><b>Emulating onramp's behavior with a WebRTC application</b></h4>
<p>
  Having a WebRTC peer emulate onramp by broadcasting connection ids when
  new connections are made allows for the network to grow without the help of
  a publicly accessible server.
</p>

<pre class="prettyprint lang-js">
// This script is for the node which will act as an "onramp" for other peers.
// Sets the onramp address to the default
var onrampAddress = "ws://" + localhost.hostname + ":20500";

// Create the root peer node
var rootNode = P.create();

// Whenever a connection is established, tell it about all the 
// other connections available, and then broadcast its connection
// id to the rest of the connections so everyone always
// knows who is connected to the onramp
rootNode.on('connection', function(connection){
  rootNode.getPeers().forEach(function(other){
    // Don't send a connection its own id
    if(other === connection) return;
    
    connection.send(other.id);
    other.send(connection.id);
  });
});

// Connect to the websocket server, onramp, which will help
// us connect to other browsers
rootNode.connect(onrampAddress);
</pre>

<h4><b>Connecting to connections of a peer</b></h4>
<p>
  We can use the pervious script's behavior to have clients expand their networks
  via peers instead of a WebSocket onramp server.
</p>
<pre class="prettyprint lang-js">
// This script uses the connection from the pervious script to expand it's network.

// An array in which we'll keep our peers
var peers = [];

// Sets the onramp address to the default
var onrampAddress = "ws://" + localhost.hostname + ":20500";

// Create the root peer node
var rootNode = P.create();

// Connect to the websocket server, onramp, which will help
// us connect to other browsers
var onrampPeer = rootNode.connect(onrampAddress);

// Listen to the messages the onramp server sends
onrampPeer.on('message', function(peerAddress){
  // Connect to peer
  var rtcPeer = onrampPeer.connect(peerAddress);

  // Bind event handlers to peer
  rtcPeerHandler(rtcPeer)
});

function rtcPeerHandler(rtcPeer){
  // Listen for 'remote address' messages from peer
  rtcPeer.on('message', function(otherPeerAddress){
    var peer = rtcPeer.connect(otherPeerAddress);

    // When the connection opens, add it to the peers array
    peer.on('open', function(){
      peers.push(peer);
    });
  });
}
</pre>

</section>